<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.kos.example</groupId>
	<artifactId>hello-springboot</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>

	<name>hello-springboot</name>
	<description>Microservice project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.3.RELEASE</version> <!-- lookup parent from repository -->
	</parent>

	<properties>
    <!-- Project -->
    <java.version>1.8</java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <fabric8.version>2.2.98</fabric8.version>
    <hystrix.version>1.5.1</hystrix.version>
    <ribbon.version>2.1.2</ribbon.version>
    <kubeflix.version>1.0.15</kubeflix.version>

    <!-- Docker-->
		<docker.assemblyDescriptorRef>artifact</docker.assemblyDescriptorRef>
		<docker.from>docker.io/fabric8/java-jboss-openjdk8-jdk:1.0.10</docker.from>
		<docker.image>fabric8/${project.artifactId}:${project.version}</docker.image>
		<docker.port.container.http>8080</docker.port.container.http>
		<docker.port.container.jolokia>8778</docker.port.container.jolokia>


    <!-- Fabric8/Kubernetes/OpenShift-->
		<fabric8.iconRef>icons/spring-boot</fabric8.iconRef>
		<fabric8.readinessProbe.httpGet.path>/health</fabric8.readinessProbe.httpGet.path>
		<fabric8.readinessProbe.httpGet.port>8080</fabric8.readinessProbe.httpGet.port>
		<fabric8.readinessProbe.initialDelaySeconds>5</fabric8.readinessProbe.initialDelaySeconds>
		<fabric8.readinessProbe.timeoutSeconds>30</fabric8.readinessProbe.timeoutSeconds>
		<fabric8.service.containerPort>8080</fabric8.service.containerPort>
		<fabric8.service.name>hello-springboot</fabric8.service.name>
		<fabric8.service.port>80</fabric8.service.port>
		<fabric8.service.type>LoadBalancer</fabric8.service.type>
    <fabric8.serviceAccount>ribbon</fabric8.serviceAccount>
    <fabric8.env.GREETING_BACKENDSERVICEHOST>backend</fabric8.env.GREETING_BACKENDSERVICEHOST>
    <fabric8.env.GREETING_BACKENDSERVICEPORT>80</fabric8.env.GREETING_BACKENDSERVICEPORT>
    <fabric8.env.USE_KUBERNETES_DISCOVERY>true</fabric8.env.USE_KUBERNETES_DISCOVERY>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
    <dependency>
      <groupId>com.netflix.hystrix</groupId>
      <artifactId>hystrix-core</artifactId>
      <version>${hystrix.version}</version>
    </dependency>
    <dependency>
      <groupId>com.netflix.hystrix</groupId>
      <artifactId>hystrix-metrics-event-stream</artifactId>
      <version>${hystrix.version}</version>
    </dependency>
    <dependency>
      <groupId>com.netflix.ribbon</groupId>
      <artifactId>ribbon-core</artifactId>
      <version>${ribbon.version}</version>
    </dependency>
    <dependency>
      <groupId>com.netflix.ribbon</groupId>
      <artifactId>ribbon-loadbalancer</artifactId>
      <version>${ribbon.version}</version>
    </dependency>
    <dependency>
      <groupId>io.fabric8.kubeflix</groupId>
      <artifactId>ribbon-discovery</artifactId>
      <version>${kubeflix.version}</version>
    </dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.14.2</version>
        <configuration>
          <images>
            <image>
              <name>${docker.image}</name>
              <build>
                <from>${docker.from}</from>
                <assembly>
                  <basedir>/app</basedir>
                  <descriptorRef>${docker.assemblyDescriptorRef}</descriptorRef>
                </assembly>
                <env>
                  <JAR>${project.artifactId}-${project.version}.war</JAR>
                  <JAVA_OPTIONS>-Djava.security.egd=/dev/./urandom</JAVA_OPTIONS>
                </env>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
			<plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-maven-plugin</artifactId>
        <version>2.2.100</version>
        <executions>
          <execution>
            <id>json</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>json</goal>
            </goals>
          </execution>
          <execution>
            <id>attach</id>
            <phase>package</phase>
            <goals>
              <goal>attach</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
		</plugins>
	</build>
	
	<profiles>
    <profile>
      <id>f8-build</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-deploy</id>
      <build>
        <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
      </build>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
        <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
      </properties>
    </profile>
    <profile>
      <id>f8-local-deploy</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
      </build>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
    </profile>
  </profiles>
	

</project>
